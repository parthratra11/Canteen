
import { useState } from "react";

export default function AddItems({ setActiveComponent, products, setProducts }) {
  const [itemName, setItemName] = useState("");
  const [itemPrice, setItemPrice] = useState("");
  const [itemDescription, setItemDescription] = useState("");
  const [loading, setLoading] = useState(false);

  const handleSubmit = (event) => {
    event.preventDefault();

    // CHECKS IF ALL THE FIELDS HAVE VALUES OR NOT
    if (
      itemName.trim().length === 0 ||
      itemPrice.trim().length === 0 ||
      itemDescription.trim().length === 0
    ) {
      alert("Field input(s) cannot be empty");
      return;
    }

    // PROCEEDS FURTHER IF ALL THE CONDITIONS ARE MET
    addProduct();
  };

  // ADDS THE ITEM TO THE MENU AND SENDS A POST REQUEST TO THE API
  async function addProduct() {
    setLoading(true);

    const productData = {
      productName: itemName,
      productDescription: itemDescription,
      productPrice: itemPrice,
      outletId: "1", // You can change this to a dynamic value based on your application logic
    };

    try {
      const response = await fetch("http://127.0.0.1:5000/registerproduct", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(productData),
      });

      const result = await response.json();

      if (response.ok) {
        alert("Product registered successfully!");

        // ADD THE NEW PRODUCT TO THE LOCAL STATE WITH THE PRODUCT ID RETURNED BY THE API
        setProducts([
          ...products,
          {
            id: result.productid.productID, // Use the returned product ID from the API
            name: itemName,
            price: itemPrice,
            description: itemDescription,
          },
        ]);

        // RESET THE FORM FIELDS
        setItemName("");
        setItemPrice("");
        setItemDescription("");
      } else {
        alert(result.message || "Failed to register the product.");
      }
    } catch (error) {
      alert("Error occurred while adding the product.");
      console.error("Error:", error);
    } finally {
      setLoading(false);
    }
  }

  return (
    <div>
      {/* ADD ITEM FORM */}
      <form>
        <div>
          <input
            className="productId"
            type="text"
            value={`Product ID will be auto-generated by the backend`}
            readOnly
          ></input>
        </div>
        <div>
          <input
            type="text"
            placeholder="Item Name"
            value={itemName}
            onChange={(e) => setItemName(e.target.value)} // DYNAMICALLY CHANGES THE VALUES WITH EACH CHANGE IN THE FORM
          ></input>
        </div>
        <div>
          <input
            type="number"
            placeholder="Item Price"
            value={itemPrice}
            onChange={(e) => setItemPrice(e.target.value)}
          ></input>
        </div>
        <div>
          <input
            type="text"
            placeholder="Item Description"
            value={itemDescription}
            onChange={(e) => setItemDescription(e.target.value)}
          ></input>
        </div>
      </form>

      {/* SUBMITS THE FORM */}
      <button onClick={handleSubmit} disabled={loading}>
        {loading ? "Submitting..." : "Submit"}
      </button>

      {/* REDIRECTS TO THE MENU */}
      <div
        className="outletNavItem"
        onClick={() => setActiveComponent("ViewItems")}
      >
        View Menu
      </div>
    </div>
  );
}
